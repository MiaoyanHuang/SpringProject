server:
  port: 10011
spring:
  application:
    name: Gateway
  cloud:
    gateway:
      routes: # 路由规则
        - id: user-service # 路由id 唯一标识
          uri: lb://UserService #http：代表固定的url || lb：代表负载均衡
          predicates: #断言, 路由条件 如果path=/user/**, 则路由到UserService
            - Path=/users/** # 请求的路径必须符合该规则
            #- After=2024-01-01T00:00:00+08:00[Asia/Shanghai] # 请求的时间必须在该时间之后
            #- Before=2024-01-01T00:00:00+08:00[Asia/Shanghai] # 请求的时间必须在该时间之前
            # 更多predicates条件可以参考Spring官方给出的doc: https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories

          #filters: # UserService的过滤器（局部）
          #  - AddRequestHeader=header, this is head # 添加请求头
      default-filters: # 全局过滤器 默认的过滤器 会应用到所有的路由上
        - AddResponseHeader=header, this is head # 添加响应头
      globalcors: # 全局跨域配置 CORS
        #配置完CORS后如果想测试 可以打开React构造一个跨域请求
        #如：fetch("http://localhost:10001/users/login/test3/tesr4")
        add-to-simple-url-handler-mapping: true # 是否添加到简单的url处理程序映射中 解决options请求404问题（请求被拦截）
                                                # options请求是预检请求, 用于检测服务器是否允许跨域请求
        cors-configurations:
          '[/**]': # [/**]这指的是所有的请求路径
            allowed-origins: # 允许的请求源
              # - "*"   # 允许所有的请求源
              - "http://localhost:3000"
              - "https://www.google.com"
            allowed-methods: # 允许的请求方法
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS # 允许options请求
            allowedHeaders: "*" # 允许的请求头 如果是"*"则允许所有的请求头
            allowCredentials: true # 是否允许浏览器发送cookie
            max-age: 360000 # 预检请求的有效期 单位是秒 因为预检请求是比较消耗资源的,
                            # 所以可以设置一个有效期, 有效期内的请求不会再次发送预检请求 从而减少服务器的压力
eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:10010/eureka/ # URL of the Eureka Server